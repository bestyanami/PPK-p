version: 2.1

jobs:
  test:
    docker:
      - image: ubuntu:latest
    
    steps:
      - checkout
      
      - run:
          name: 设置非交互式前端
          command: |
            export DEBIAN_FRONTEND=noninteractive
            echo 'tzdata tzdata/Areas select Etc' | debconf-set-selections
            echo 'tzdata tzdata/Zones/Etc select UTC' | debconf-set-selections
            
      - run:
          name: 安装基础依赖项
          command: |
            export DEBIAN_FRONTEND=noninteractive
            apt-get update
            apt-get install -y software-properties-common wget curl sudo tzdata
            
      - run:
          name: 安装 Python
          command: |
            sudo apt-get install -y python3.11 python3.11-venv python3.11-dev
            sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1
            sudo apt-get install -y python3-pip
      
      - run:
          name: 安装 R
          command: |
            sudo apt-get install --yes dirmngr
            wget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | sudo tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc
            sudo add-apt-repository "deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/"
            sudo apt-get update
            sudo apt-get install -y --no-install-recommends r-base r-base-dev libcurl4-openssl-dev libssl-dev libxml2-dev
      
      - run:
          name: 安装 R 依赖项
          command: |
            sudo R -e 'install.packages(c("shiny", "ggplot2", "dplyr", "readr", "markdown"), repos="https://cloud.r-project.org/", type="binary")'
      
      - run:
          name: 创建 Python 虚拟环境并安装依赖项
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      
      - run:
          name: 测试应用程序启动
          command: |
            . venv/bin/activate
            mkdir -p PKdata PKModelLibrary PKBaseModelFolder PKObjResultsFolder PKCovariatesFolder PKPEResultsFolder PKDrawingFolder PLModelFolder PLData
            
            # 添加测试数据和模型
            echo "# 示例模型文件" > PKModelLibrary/example_model.R
            
            # 在后台启动 Flask 应用程序
            python3 -c "from app import app; import threading; threading.Thread(target=lambda: app.run(debug=False, host='0.0.0.0')).start()" &
            APP_PID=$!
            
            # 等待应用程序启动
            sleep 3
            
            # 测试应用程序响应
            RESPONSE=$(curl --retry 10 --retry-delay 1 --retry-connrefused --max-time 5 -s -o /dev/null -w "%{http_code}" http://localhost:5000/)
            echo "收到HTTP响应码: $RESPONSE"
            
            # 终止 Flask 进程
            if ps -p $APP_PID > /dev/null; then
              echo "终止Flask进程 PID: $APP_PID"
              kill $APP_PID
            fi
            pkill -f "python3 -c.*app.run" || true
            
            # 检查响应码
            if [ "$RESPONSE" = "200" ] || [ "$RESPONSE" = "302" ]; then
              echo "应用程序启动成功，状态码: $RESPONSE"
            else
              echo "应用程序测试失败，状态码: $RESPONSE"
              exit 1
            fi

workflows:
  version: 2
  build_and_test:
    jobs:
      - test:
          filters:
            branches:
              only:
                - main
                - master